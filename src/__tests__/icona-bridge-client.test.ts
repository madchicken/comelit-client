import { bufferToString, JSONMessage, PacketMessage } from '../icona-bridge-client';

describe('Icona Bridge Client', () => {
  it('should produce a valid AUTH message', function() {
    const message = PacketMessage.create('UAUT');
    expect(message.dump()).toBe(
      '00 06 0f 00 00 00 00 00 cd ab 01 00 07 00 00 00 55 41 55 54 12 24 00'
    );
  });

  it('should produce a valid UCFG message', function() {
    const message = PacketMessage.create('UCFG');
    expect(message.dump()).toBe(
      '00 06 0f 00 00 00 00 00 cd ab 01 00 07 00 00 00 55 43 46 47 13 24 00'
    );
  });

  it('should read a packet with JSON', () => {
    // prettier-ignore
    const bytes = [
      0x7b, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
      0x65, 0x22, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x65,
      0x73, 0x73, 0x22, 0x2c, 0x22, 0x6d, 0x65, 0x73,
      0x73, 0x61, 0x67, 0x65, 0x2d, 0x74, 0x79, 0x70,
      0x65, 0x22, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x70,
      0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x22, 0x6d,
      0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x69,
      0x64, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x72, 0x65,
      0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x63,
      0x6f, 0x64, 0x65, 0x22, 0x3a, 0x32, 0x30, 0x30,
      0x2c, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
      0x73, 0x65, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x6e,
      0x67, 0x22, 0x3a, 0x22, 0x41, 0x63, 0x63, 0x65,
      0x73, 0x73, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x74,
      0x65, 0x64, 0x22, 0x7d ];
    const packet = PacketMessage.fromBuffer(Buffer.from(bytes));

    expect(packet.message).toBeDefined();
    expect(packet.message.message).toBe('access');
    expect(packet.message['message-type']).toBe('response');
    expect(packet.message['message-id']).toBe(2);
    expect(packet.message['response-code']).toBe(200);
    expect(packet.message['response-string']).toBe('Access Granted');
  });

  it('should create a JSON packet from a message', () => {
    const json = {
      message: 'access',
      'user-token': '9f32acb3e7f452f86d43e1b7c9a3eac4',
      'message-type': 'request',
    } as JSONMessage;
    const packet = PacketMessage.fromJSON(json);

    // prettier-ignore
    const buffer = Buffer.from([
        0x00, 0x06, 0x81, 0x00, 0x12, 0x24, 0x00, 0x00, 0x7b, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x65, 0x73,
        0x73, 0x61, 0x67, 0x65, 0x22, 0x20, 0x3a, 0x20, 0x22, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
        0x2c, 0x0a, 0x20, 0x20, 0x22, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
        0x20, 0x3a, 0x20, 0x22, 0x39, 0x66, 0x33, 0x32, 0x61, 0x63, 0x62, 0x33, 0x65, 0x37, 0x66, 0x34,
        0x35, 0x32, 0x66, 0x38, 0x36, 0x64, 0x34, 0x33, 0x65, 0x31, 0x62, 0x37, 0x63, 0x39, 0x61, 0x33,
        0x65, 0x61, 0x63, 0x34, 0x22, 0x2c, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
        0x65, 0x2d, 0x69, 0x64, 0x22, 0x20, 0x3a, 0x20, 0x32, 0x2c, 0x0a, 0x20, 0x20, 0x22, 0x6d, 0x65,
        0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x3a, 0x20, 0x22, 0x72,
        0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0a, 0x7d]);

    expect(packet.bytes).toBeDefined();
    expect(packet.message['message-id']).toBe(1);
    expect(packet.dump()).toBe(bufferToString(buffer));
  });
});
